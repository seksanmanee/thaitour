{"version":3,"sources":["../../src/providers/utils/utils.ts","../../src/providers/post/post.ts","../../src/providers/user/user.ts","../../src/providers/chat/chat.ts","../../src/providers/friends-location-map/friends-location-map.ts","../../src/providers/admob-free/admob-free.ts","../../node_modules/@angular/core/@angular lazy","../../src lazy","../../src/providers/shared/shared.ts","../../src/providers/authentication/authentication.ts","../../src/providers/image/image.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/providers/utils/storage.ts","../../src/providers/notification/notification.ts","../../src/config/admob.ts","../../src/config/firebase.ts","../../src/app/app.component.ts","../../src/providers/friends/friends.ts","../../src/providers/connections/connections.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of Shared.\n * File path - '../../../src/providers/utils/utils'\n */\n\nimport { Injectable } from '@angular/core';\nimport { LoadingController } from 'ionic-angular';\nimport { AlertController } from 'ionic-angular';\nimport { ToastController } from 'ionic-angular';\nimport { ActionSheetController } from 'ionic-angular';\n\n@Injectable()\nexport class UtilsProvider {\n\n  loading: any;\n\n  constructor(private loadingController: LoadingController,\n    private alertCtrl: AlertController,\n    private toastCtrl: ToastController,\n    private actionSheetCtrl: ActionSheetController) {\n\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Present Loading Option\n   * --------------------------------------------------------------\n   */\n  presentLoading() {\n    this.loading = this.loadingController.create({\n      content: 'Please wait..',\n      spinner: 'crescent'\n    })\n    return this.loading.present();\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Hide Loading Option\n   * --------------------------------------------------------------\n   */\n  hideLoading() {\n    return this.loading.dismiss();\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Show Basic Alert\n   * --------------------------------------------------------------\n   */\n  basicAlert(title, subTitle) {\n    let promise = new Promise((resolve, reject) => {\n      let alert = this.alertCtrl.create({\n        title: title,\n        subTitle: subTitle,\n        buttons: [\n          {\n            text: 'OK',\n            handler: data => {\n              resolve('ok')\n            }\n          }\n        ]\n      });\n      alert.present()\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Show Confirm\n   * --------------------------------------------------------------\n   */\n  showConfirm(title, message) {\n    let promise = new Promise((resolve, reject) => {\n      let confirm = this.alertCtrl.create({\n        title: title,\n        message: message,\n        buttons: [\n          {\n            text: 'No',\n            handler: () => {\n              resolve('no')\n            }\n          },\n          {\n            text: 'Yes',\n            handler: () => {\n              resolve('yes')\n            }\n          }\n        ]\n      });\n      confirm.present();\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Map InfoWindow\n   * --------------------------------------------------------------\n   */\n  mapInfoWindow(title, message, buttons) {\n    let promise = new Promise((resolve, reject) => {\n      let confirm = this.alertCtrl.create({\n        title: title,\n        message: message,\n        cssClass: 'map-info-window'\n      });\n      for (var i = 0; i < buttons.length; i++) {\n        let btnName = buttons[i].text;\n        confirm.addButton({\n          text: btnName,\n          handler: () => {\n            resolve(btnName);\n          }\n        });\n      }\n      confirm.present();\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Present Toast\n   * --------------------------------------------------------------\n   */\n  presentToast(message, duration, position) {\n    let toast = this.toastCtrl.create({\n      message: message,\n      duration: duration,\n      position: position\n    });\n\n    toast.onDidDismiss(() => {\n      console.log('Dismissed toast');\n    });\n\n    toast.present();\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Present Action Sheet\n   * --------------------------------------------------------------\n   */\n  presentActionSheet(buttons) {\n    let promise = new Promise((resolve) => {\n\n      let actionSheet = this.actionSheetCtrl.create({\n        title: 'Actions'\n      });\n\n      for (var i = 0; i < buttons.length; i++) {\n        let btnName = buttons[i].text;\n        let className = buttons[i].className;\n\n        actionSheet.addButton({\n          text: btnName,\n          cssClass: className,\n          handler: () => {\n            resolve(btnName);\n          }\n        });\n      }\n\n      actionSheet.addButton({ text: 'Cancel', 'role': 'cancel' });\n\n      actionSheet.present();\n    });\n    return promise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/utils/utils.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of post,\n * All the post related methods are written in this file. \n * Which connects directly to the Firebase database.\n * File path - '../../../src/providers/post/post'\n */\n\nimport { Injectable } from '@angular/core';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { NotificationProvider } from '../notification/notification';\nimport { ConnectionsProvider } from '../connections/connections';\nimport { SharedProvider } from '../shared/shared';\nimport { CommentModel } from '../../models/comments';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class PostProvider {\n\n  private _commentModel = {} as CommentModel;\n  dbRef: any;\n  postRef: any;\n  newsfeedRef: any;\n  likesRef: any;\n  commentsRef: any;\n\n  constructor(\n    private db: AngularFireDatabase,\n    private notificationProvider: NotificationProvider,\n    private connectionsProvider: ConnectionsProvider,\n    private sharedProvider: SharedProvider) {\n    this.dbRef = this.db.database.ref();\n    this.likesRef = this.db.database.ref(`/post-likes/`);\n    this.commentsRef = this.db.database.ref(`/post-comments/`);\n    this.postRef = this.db.database.ref(`/posts/`);\n    this.newsfeedRef = this.db.database.ref(`/newsfeed`);\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Create a New Post\n   * --------------------------------------------------------------\n   * @method createPost\n   * This function create a new post and add this new post on user own location of `posts`,\n   * `newsfeed` and followers `newsfeed` inside of database and increase user total count of post.\n   * \n   * @param data Post data\n   */\n  createPost(data) {\n    const fannedOutData = {};\n    const postkey = this.db.database.ref().push().key; // Post Unique Key\n    const newPostData = Object.assign(data, { key: postkey }); // Post Information\n\n    let promise = new Promise((resolve, reject) => {\n\n      // Create post on user own timeline\n      fannedOutData[`/posts/${data.uid}/${postkey}`] = newPostData;\n\n      // Create post on user own newsfeed\n      fannedOutData[`newsfeed/${data.uid}/${postkey}`] = newPostData;\n\n      // Call `this.connectionsProvider.getFollowersIds` method from connection provider\n      // This method will return user followers ID's\n      this.connectionsProvider.getFollowersIds(data.uid).then((followers: any) => {\n        followers.forEach((user) => {\n\n          // Create post on each follower's newsfeed\n          fannedOutData[`newsfeed/${user}/${postkey}`] = newPostData;\n\n          // Update follower's newsfeed\n          this.dbRef.ref.update(fannedOutData);\n        });\n      });\n\n      // Increase Post Total Count Number\n      this.increasePostCount(data.uid);\n\n      this.dbRef.ref.update(fannedOutData).then(() => {\n        resolve('success');\n      }).catch((err: any) => {\n        reject(err);\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Update Post\n   * --------------------------------------------------------------\n   * \n   * @method updatePost\n   * @param data    Post data\n   */\n  updatePost(data) {\n    let fannedOutData = {};\n\n    let promise = new Promise((resolve, reject) => {\n\n      // Update post data on user own timeline\n      fannedOutData[`/posts/${data.uid}/${data.key}`] = data;\n\n      // Update post data on user own newsfeed\n      fannedOutData[`newsfeed/${data.uid}/${data.key}`] = data;\n\n      // Call `this.connectionsProvider.getFollowersIds` method from connection provider\n      // This method will return user followers ID's\n      this.connectionsProvider.getFollowersIds(data.uid).then((followers: any) => {\n        followers.forEach((user) => {\n          // Update post on each follower's newsfeed\n          fannedOutData[`newsfeed/${user}/${data.key}`] = data;\n          this.dbRef.ref.update(fannedOutData);\n        });\n      });\n\n      this.dbRef.ref.update(fannedOutData).then(() => {\n        resolve('success');\n      }).catch((err: any) => {\n        reject(err);\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Newsfeed Posts\n   * --------------------------------------------------------------\n   * @param uid           Current User ID\n   * @param firstkey      Newsfeed Post's Firstkey\n   * @return promise      { Resolved promise return list of array newsfeed posts and\n   * rejected promise return errors. }\n   * \n   * This method query `newsfeed` location of database and find out following\n   * users latest posts, after that query `post-likes` and `post-comments` location\n   * to get particular post total likes and comments.\n   * \n   */\n  getNewsFeedPosts(uid, firstkey?) {\n    let queryRef;\n    let totalLikes = 0;\n    let totalComments = 0;\n    let count = 0;\n    let posts = [];\n\n    let promise = new Promise((resolve, reject) => {\n      if (firstkey) {\n        queryRef = this.db.list(`/newsfeed/${uid}`, ref => ref.orderByKey().limitToLast(5).endAt(firstkey));\n      } else {\n        queryRef = this.db.list(`/newsfeed/${uid}`, ref => ref.orderByKey().limitToLast(5));\n      }\n\n      queryRef.valueChanges().subscribe((list: any) => {\n        list.forEach(element => {\n          this.likesRef.child(`${element.key}`).on('value', (postLikes) => {\n            this.commentsRef.child(`${element.key}`).on('value', (postComments) => {\n              count++;\n              totalLikes = postLikes.numChildren();\n              totalComments = postComments.numChildren();\n              posts.push(Object.assign(element,\n                {\n                  'totalLikes': totalLikes, 'totalComments': totalComments\n                }\n              ));\n              if (count === list.length) {\n                resolve(posts);\n              }\n            });\n          });\n        });\n      }, error => {\n        reject(error);\n      });\n    });\n\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Timeline Posts\n   * --------------------------------------------------------------\n   * @method getTimeLinePosts\n   * \n   * This method query `posts` location of database and retrieve current user timeline post.\n   * After that query inside `post-likes` and `post-comments` location\n   * to get particular post total likes and comments.\n   * \n   * @param uid         Current User ID\n   * @param firstkey    Timeline Post's Firstkey\n   * @return Promise    { Resolved promise return list of array timeline posts and\n   * rejected promise return errors. }\n   * \n   * \n   */\n  getTimeLinePosts(uid, firstkey?) {\n    let queryRef;\n    let posts = []; // Array of post\n    let count = 0;\n    let totalLikes = 0;\n    let totalComments = 0;\n\n    const promise = new Promise((resolve, reject) => {\n      if (firstkey) {\n        queryRef = this.db.list(`/posts/${uid}`, ref => ref.orderByKey().limitToLast(5).endAt(firstkey));\n      } else {\n        queryRef = this.db.list(`/posts/${uid}`, ref => ref.orderByKey().limitToLast(5));\n      }\n\n      queryRef.valueChanges().subscribe((list: any) => {\n        list.forEach(element => {\n          this.likesRef.child(`${element.key}`).on('value', (postLikes) => {\n            this.commentsRef.child(`${element.key}`).on('value', (postComments) => {\n              count++;\n              totalLikes = postLikes.numChildren();\n              totalComments = postComments.numChildren();\n              posts.push(Object.assign(element, { 'totalLikes': totalLikes, 'totalComments': totalComments }));\n\n              if (count === list.length) {\n                resolve(posts);\n              }\n            });\n          });\n        });\n      }, error => {\n        reject(error);\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Like Post\n   * --------------------------------------------------------------\n   * @method likePost\n   * \n   * This function update and set particular post `isLike` status to `true` reference at\n   * `this.likesRef` `this.postRef` and `this.newsfeedRef` location of database. And for the post\n   * owner will be sent a like notification.\n   * \n   * @param postkey       Post Unique Key\n   * @param postOwner     Post Owner ID\n   * @param uid           Current User ID\n   */\n  likePost(postkey, postOwner, uid) {\n    return new Observable(observer => {\n      this.likesRef.child(postkey).child(uid).set(true).then(() => {\n        this.postRef.child(uid).child(postkey).child(`isLike`).set(true);\n        this.newsfeedRef.child(uid).child(postkey).child(`isLike`).set(true);\n        // Create Notification\n        if (uid !== postOwner) {\n          this.notificationProvider.createNotification(uid, postOwner, 'like', postkey);\n        }\n        observer.next('success');\n      }).catch(err => {\n        observer.error(err);\n      })\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Unlike Post\n   * --------------------------------------------------------------\n   * @method unlikePost\n   * \n   * This function update and set particular post `isLike` status to `false` reference at\n   * `this.likesRef` `this.postRef` and `this.newsfeedRef` location of database.\n   * \n   * @param postkey       Post Unique Key\n   * @param uid           Current User ID\n   */\n  unlikePost(postkey, uid) {\n    return new Observable(observer => {\n      this.likesRef.child(postkey).child(uid).remove().then(() => {\n        this.postRef.child(uid).child(postkey).child(`isLike`).set(false);\n        this.newsfeedRef.child(uid).child(postkey).child(`isLike`).set(false);\n        observer.next('success');\n      }).catch(err => {\n        observer.error(err);\n      })\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * New Comment\n   * --------------------------------------------------------------\n   * @method createComment\n   * This function create a new comment for specific post and\n   * the opposite user whose post is being commented will get a notification.\n   * \n   * @param content         Comment Content\n   * @param postInfo        Post Information\n   * @param currentUserId   Current User ID\n   */\n  createComment(content, postInfo, currentUserId) {\n\n    const fannedOutData = {};\n    this._commentModel.commentKey = this.db.database.ref().push().key; // Generate New Comment Key\n    this._commentModel.commentOwner = currentUserId;\n    this._commentModel.postkey = postInfo.key;\n    this._commentModel.text = content;\n    this._commentModel.createdDate = new Date();\n\n    let promise = new Promise((resolve, reject) => {\n\n      // Update `post-comments` based on generated new commentKey `this._commentModel.commentKey`\n      fannedOutData[`/post-comments/${postInfo.key}/${this._commentModel.commentKey}`] = this._commentModel;\n      this.dbRef.ref.update(fannedOutData);\n\n      // Send Notification to Post Owner\n      if (currentUserId !== postInfo.uid) {\n        this.notificationProvider.createNotification(currentUserId, postInfo.uid, 'comment', postInfo.key);\n      }\n      resolve('success');\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Comments\n   * --------------------------------------------------------------\n   * @method getCommentsByPostId\n   * \n   * This method query inside `post-comments` location of database and retrieve specific post\n   * list of comments. And also call `this.sharedProvider.getUserInfoByUserId` this\n   * method to get user information for each comment, make a new array list of\n   * comments with user information called this by `comments`.\n   * \n   * @param postId        Post Unique Key\n   * @param lastkey       Last key of Comment List\n   */\n  getCommentsByPostId(postId, lastkey?) {\n\n    let queryRef;\n    let count = 0;\n    let comments = [];\n\n    let promise = new Promise((resolve, reject) => {\n\n      if (lastkey) {\n        queryRef = this.db.list(`/post-comments/${postId}`, ref => ref.orderByKey().limitToLast(10).endAt(lastkey));\n      } else {\n        queryRef = this.db.list(`/post-comments/${postId}`, ref => ref.orderByKey().limitToLast(10));\n      }\n\n      queryRef.valueChanges().subscribe((list: any) => {\n        comments = [];\n        list.forEach((element) => {\n          this.sharedProvider.getUserInfoByUserId(element.commentOwner).then((user: any) => {\n            count++;\n            comments.push(Object.assign(\n              element, { userName: user.name, userImage: user.image }\n            ));\n            if (count === list.length) {\n              resolve(comments);\n            }\n          });\n        });\n      }, error => {\n        reject(error);\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Particular Post Information\n   * --------------------------------------------------------------\n   * @param uid         User ID\n   * @param postkey     Post Key\n   * @return promise    Object Data of Particular Post\n   * \n   * This method query inside `posts` location of database and retrieve particular post information\n   * by post unique key with user uid, after that query `post-likes` and `post-comments` location\n   * to get particular post total likes and comments.\n   * \n   */\n  getPostById(uid, postkey) {\n    let totalLikes = 0;\n    let totalComments = 0;\n\n    let promise = new Promise((resolve, reject) => {\n      this.db.object(`/posts/${uid}/${postkey}`).valueChanges()\n        .subscribe((data: any) => {\n          this.likesRef.child(`${postkey}`).on('value', (postLikes) => {\n            this.commentsRef.child(`${postkey}`).on('value', (postComments) => {\n              totalLikes = postLikes.numChildren(); // This post's Total Like\n              totalComments = postComments.numChildren(); // This post's Total Comment\n              resolve(Object.assign(data, { 'totalLikes': totalLikes, 'totalComments': totalComments }));\n            });\n          });\n        }, err => {\n          reject(err);\n        })\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve User Post ID's\n   * --------------------------------------------------------------\n   * @method getUserPostIDs\n   * \n   * This function will load the user's post ID's from the database.\n   * @param uid User ID\n   */\n  getUserPostIDs(uid) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/posts/${uid}`).on('value', snapshot => {\n        if (snapshot.exists()) {\n          resolve(Object.keys(snapshot.val()));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * Delete or remove post\n   * @param uid user Id\n   * @param postkey Post Key\n   */\n  deletePost(uid, postkey) {\n    let followers: any;\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/posts/${uid}/${postkey}`).remove();\n      this.db.database.ref(`/newsfeed/${uid}/${postkey}`).remove();\n\n      followers = this.connectionsProvider.getFollowersIds(uid);\n\n      if (followers.length > 0) {\n        followers.forEach(element => {\n          this.db.database.ref(`/newsfeed/${element.$key}/${postkey}`).remove();\n        });\n      }\n      this.decreasePostCountByUserId(uid);\n      resolve('success');\n    });\n    return promise;\n  }\n\n  /**\n   * Increase user total post count\n   */\n  increasePostCount = (uid) => {\n    const databaseRef = this.db.database.ref('users').child(uid).child('totalPost');\n\n    databaseRef.transaction(function (current) {\n\n      return current = (current || 0) + 1;\n\n    });\n  }\n\n  /**\n   * Decrease user total post count\n   */\n  decreasePostCountByUserId = (uid) => {\n    const databaseRef = this.db.database.ref('users').child(uid).child('totalPost');\n\n    databaseRef.transaction(function (current) {\n\n      return current = (current || 0) - 1;\n\n    });\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/post/post.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of user,\n * All the user related methods are written in this file. \n * Which connects directly to the Firebase database.\n * File path - '../../../src/providers/user/user'\n */\n\nimport { Injectable, Injector } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { ConnectionsProvider } from '../connections/connections';\nimport { FriendsProvider } from '../friends/friends';\nimport { StorageProvider } from '../utils/storage';\nimport { SharedProvider } from '../shared/shared';\nimport { PostProvider } from '../post/post';\n\n@Injectable()\nexport class UserProvider {\n\n  dbRef: any;\n\n  constructor(injector: Injector,\n    private db: AngularFireDatabase,\n    private storageProvider: StorageProvider,\n    private connectionsProvider: ConnectionsProvider,\n    private friendsProvider: FriendsProvider,\n    private sharedProvider: SharedProvider,\n    private postProvider: PostProvider) {\n    this.dbRef = this.db.database.ref();\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Update User Information\n   * --------------------------------------------------------------\n   * @method updateUserData\n   * @param data    User Informations\n   */\n  updateUserData(data) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.list('users').update(data.uid, data).then((success: any) => {\n        resolve(success);\n      }).catch((err: any) => {\n        reject(err);\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Update User Name\n   * --------------------------------------------------------------\n   * @method updateUserName\n   * \n   * This function update user name at user own `posts`, `newsfeed`, user followers\n   * `newsfeed` and user `friends-location` inside these locations of the database where\n   * user's information is exists.\n   * \n   * @param data    User Data\n   */\n  async updateUserName(data) {\n    let promise = new Promise((resolve, reject) => {\n      let fannedOutData = {};\n\n      // Update User's own Post and Newsfeed\n      this.postProvider.getUserPostIDs(data.uid).then((postKeys: any) => {\n        if (postKeys) {\n          for (let i = 0; i < postKeys.length; i++) {\n            fannedOutData['/posts/' + data.uid + '/' + postKeys[i] + '/' + 'userName'] = data.name;\n            fannedOutData['/newsfeed/' + data.uid + '/' + postKeys[i] + '/' + 'userName'] = data.name;\n          }\n        }\n\n        // Update User's Followers Post and Newsfeed\n        this.connectionsProvider.getFollowersIds(data.uid).then((followers: any) => {\n          if (followers && postKeys) {\n            for (let i = 0; i < followers.length; i++) {\n              for (let j = 0; j < postKeys.length; j++) {\n                fannedOutData['/newsfeed/' + followers[i] + '/' + postKeys[j] + '/' + 'userName'] = data.name;\n              }\n            }\n          }\n\n          // Update User Friend's Location\n          this.sharedProvider.getUserFriendIds(data.uid).then((friends: any) => {\n            if (friends) {\n              for (let i = 0; i < friends.length; i++) {\n                fannedOutData['/friends-location/' + friends[i] + '/' + data.uid + '/' + 'userName'] = data.name;\n              }\n            }\n\n            // Update Local Storage\n            this.storageProvider.set(data.uid, data.name, data.email, data.image).then(() => {\n              this.dbRef.ref.update(fannedOutData);\n              resolve('success');\n            }, function (error) {\n              reject(error);\n            });\n          });\n        });\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Update Profile Photo\n   * --------------------------------------------------------------\n   * @method updateProfileImage\n   * \n   * This function update user profile photo at user onw profile `users`, user own `posts`,\n   * `newsfeed`, user followers `newsfeed` and user `friends-location` inside these\n   * locations of the database where user's information is exists.\n   * \n   * @param data    User Data\n   */\n  updateProfileImage(data) {\n\n    let promise = new Promise((resolve, reject) => {\n      let fannedOutData = {};\n\n      // Update User Own Record\n      fannedOutData['/users/' + data.uid + '/' + 'image'] = data.image;\n\n      // Update User's own Post and Newsfeed\n      this.postProvider.getUserPostIDs(data.uid).then((postKeys: any) => {\n        if (postKeys) {\n          for (let i = 0; i < postKeys.length; i++) {\n            fannedOutData['/posts/' + data.uid + '/' + postKeys[i] + '/' + 'userImage'] = data.image;\n            fannedOutData['/newsfeed/' + data.uid + '/' + postKeys[i] + '/' + 'userImage'] = data.image;\n          }\n        }\n\n        // Update User's Followers Post and Newsfeed\n        this.connectionsProvider.getFollowersIds(data.uid).then((followers: any) => {\n          if (followers && postKeys) {\n            for (let i = 0; i < followers.length; i++) {\n              for (let j = 0; j < postKeys.length; j++) {\n                fannedOutData['/newsfeed/' + followers[i] + '/' + postKeys[j] + '/' + 'userImage'] = data.image;\n              }\n            }\n          }\n\n          // Update User Friend's Location\n          this.sharedProvider.getUserFriendIds(data.uid).then((friends: any) => {\n            if (friends) {\n              for (let i = 0; i < friends.length; i++) {\n                fannedOutData['/friends-location/' + friends[i] + '/' + data.uid + '/' + 'userImage'] = data.image;\n              }\n            }\n\n            // Update Local Storage\n            this.storageProvider.set(data.uid, data.name, data.email, data.image).then(() => {\n              this.dbRef.ref.update(fannedOutData);\n              resolve('success');\n            }, function (error) {\n              reject(error);\n            });\n          });\n        });\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Get Target User Information\n   * --------------------------------------------------------------\n   * @method getTargetUserInfos\n   * @param userId Particular User Id\n   * @param currentUserId Current UserId\n   */\n  async getTargetUserInfos(userId, currentUserId) {\n    const userCustomObj = {\n      isFriend: false,\n      isFollowing: false,\n      isReceivedFrndReq: false,\n      isSendFrndReq: false\n    };\n\n    // Call `this.sharedProvider.getUserInfoByUserId` to get particular user informations\n    const userInfo: any = await this.sharedProvider.getUserInfoByUserId(userId);\n\n    if (userInfo) {\n\n      if (userInfo.friends) {\n        // Retrieve current userId from friend list of `userInfo`\n        const friends: any = Object.keys(userInfo.friends);\n        const findFriend = friends.find((n) => n === currentUserId);\n        // If current userId exist on the user's friend list\n        // make `userCustomObj.isFriend` property is `true`\n        if (findFriend) {\n          userCustomObj.isFriend = true;\n        }\n      }\n\n      // Call `this.friendsProvider.getReceivedFriendRequestList` method to retrieve user\n      // received friend request list\n      await this.friendsProvider.getReceivedFriendRequestList(currentUserId).then((receivedFriendReq: any) => {\n        if (receivedFriendReq) {\n          const findreceivedFriend = receivedFriendReq.find((n) => n === userId);\n          // if current user get the friend request from the targeted user,\n          // make `userCustomObj.isReceivedFrndReq` property is `true`\n          if (findreceivedFriend) {\n            userCustomObj.isReceivedFrndReq = true;\n          }\n        }\n      });\n\n      // Call `this.friendsProvider.getSendFriendRequestList` method to retrieve user\n      // list of sending friend requests\n      await this.friendsProvider.getSendFriendRequestList(currentUserId).then((sendFriendReq: any) => {\n        if (sendFriendReq) {\n          const findSendFriend = sendFriendReq.find((n) => n === userId);\n          // if current user sent the friend request to targeted user,\n          // make `userCustomObj.isSendFrndReq` property is `true`\n          if (findSendFriend) {\n            userCustomObj.isSendFrndReq = true;\n          }\n        }\n      });\n\n      // Call `this.connectionsProvider.getFollowingIds` method to retrieve following user's ID\n      await this.connectionsProvider.getFollowingIds(currentUserId).then((following: any) => {\n        if (following) {\n          const findFollowingUser = following.find((n) => n === userId);\n          // If current user follow to targeted user\n          // make `userCustomObj.isFollowing` property is `true`\n          if (findFollowingUser) {\n            userCustomObj.isFollowing = true;\n          }\n        }\n      });\n\n      return new Observable(observer => {\n        observer.next(Object.assign(userInfo, userCustomObj));\n      });\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/user/user.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of chat,\n * All the chat methods are written in this file. \n * Which connects directly to the Firebase database\n * File path - '../../../src/providers/chat/chat'\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { SharedProvider } from '../shared/shared';\n\n@Injectable()\nexport class ChatProvider {\n\n  constructor(\n    private db: AngularFireDatabase,\n    private sharedProvider: SharedProvider) { }\n\n  /**\n   * -----------------------------------------------------------\n   * Get User Chat Reference\n   * -----------------------------------------------------------\n   * @method getChatRef     This method find out link of chat reference,\n   * and send it to component where two user's can chat based on this link.\n   * \n   * @param userId          Current User ID\n   * @param partnerId       PartnerId\n   */\n  getChatRef(userId, partnerId) {\n    let promise = new Promise((resolve, reject) => {\n      let ref1 = this.db.object(`/chats/${userId},${partnerId}`).snapshotChanges();\n      ref1.subscribe(snapshot => {\n        const a = snapshot.payload.val();\n        if (a) {\n          resolve(`${userId},${partnerId}`);\n        } else {\n          let ref2 = this.db.object(`/chats/${partnerId},${userId}`).snapshotChanges();\n          ref2.subscribe(snapshot => {\n            const b = snapshot.payload.val()\n            if (!b) {\n              this.updateChatHistory(userId, partnerId);\n            }\n          });\n          resolve(`${partnerId},${userId}`);\n        }\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Update Last Time of Two Users Chat History\n   * --------------------------------------------------------------\n   * @method updateChatHistory\n   * @param userId      Current User ID\n   * @param partnerId   Partner ID\n   */\n  updateChatHistory(userId, partnerId) {\n    // First User\n    let user1 = this.db.object(`/chat-history/${userId}/${partnerId}`);\n    user1.set(new Date().getTime());\n    // Second User\n    let user2 = this.db.object(`/chat-history/${partnerId}/${userId}`);\n    user2.set(new Date().getTime());\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Increase Chat Notification\n   * --------------------------------------------------------------\n   * @param partnerId         Partner ID\n   * @param userId            Current User ID\n   */\n  increaseNotification(partnerId, userId) {\n    let ref1 = this.db.database.ref(`/chat-notification/${partnerId}/`).child(`${userId}`);\n    ref1.once('value', snapshot => {\n      ref1.transaction(function (current) {\n        return current = (current || 0) + 1;\n      });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Total Unread Chat Thread\n   * --------------------------------------------------------------\n   * @param userId  Current user Id\n   * @return Observable\n   */\n  totalUnreadChat(userId) {\n    return Observable.create(observer => {\n      this.db.list(`/chat-notification/${userId}/`).valueChanges().subscribe((data: any) => {\n        let totalUnread = data.filter((n) => n !== 0);\n        observer.next(totalUnread.length);\n      }, function (error) {\n        observer.error(error);\n      });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Read Chat Messages\n   * --------------------------------------------------------------\n   * @param userId \n   * @param partnerId \n   */\n  readChatMsg(userId, partnerId) {\n    this.db.database.ref(`/chat-notification/${userId}/`).child(`${partnerId}`).set(0);\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Chat Hostory\n   * --------------------------------------------------------------\n   * @method getChatHistoryList\n   * @param       userId      User ID\n   * @return      Promise \n   */\n  getChatHistoryList(userId) {\n\n    // Initial count\n    let count = 0;\n\n    // Make a new array list of user chat history\n    const chatHistoryList: any = [];\n\n    let promise = new Promise((resolve, reject) => {\n\n      // Get list of user chat hostory by calling `getChatHistories` function.\n      this.getChatHistories(userId).then((users: any) => {\n\n        // Get list of chat thread notification by calling `getChatThreadNotification` function.\n        this.getChatThreadNotification(userId).then((notifications: any) => {\n          users.forEach(eachUser => {\n            const findTargetUser = notifications.find((n) => n.key === eachUser.key);\n\n            // Get user details information\n            this.sharedProvider.getUserInfoByUserId(eachUser.key).then(user => {\n              count++;\n              if (findTargetUser) {\n                chatHistoryList.push(Object.assign(user, { chatLastTime: eachUser.value, unreadMsg: findTargetUser.value }));\n              } else {\n                chatHistoryList.push(Object.assign(user, { chatLastTime: eachUser.value }));\n              }\n              if (count === users.length) {\n                resolve(chatHistoryList);\n              }\n            });\n          });\n        });\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve User Chat Thread Notification Number\n   * --------------------------------------------------------------\n   * @method getChatThreadNotification\n   * @param userId  Current User ID\n   */\n  getChatThreadNotification(userId) {\n    var list = [];\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/chat-notification/${userId}/`).on('value', (snapshot: any) => {\n        if (snapshot.exists()) {\n          snapshot.forEach(function (notification: any) {\n            list.push({ key: notification.key, value: notification.val() });\n          });\n          resolve(list);\n        } else {\n          resolve(list);\n        }\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Chat User List\n   * --------------------------------------------------------------\n   * @method    getChatHistories  \n   * @param     userId            userID\n   * @return    Promise\n   */\n  getChatHistories(userId) {\n    var list = [];\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/chat-history/${userId}`).on('value', (snapshot: any) => {\n        if (snapshot.exists()) {\n          snapshot.forEach(function (chatHistory: any) {\n            list.push({ key: chatHistory.key, value: chatHistory.val() });\n          });\n          resolve(list);\n        } else {\n          resolve(list);\n        }\n      });\n    });\n    return promise;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/chat/chat.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of location map,\n * Related friends location map methods are written in this file. \n * File path - '../../../src/providers/friends-location-map/friends-location-map'\n */\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Geolocation } from '@ionic-native/geolocation';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { SharedProvider } from '../../providers/shared/shared';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class FriendsLocationMapProvider {\n  dbRef: any;\n\n  constructor(public http: Http,\n    public geolocation: Geolocation,\n    private afDB: AngularFireDatabase,\n    private sharedProvider: SharedProvider) {\n    this.dbRef = this.afDB.database.ref();\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Get User Current Location\n   * --------------------------------------------------------------\n   * @method getCurrentLocation\n   * Get Current Location using freegeoip.net because\n   * It's fast and quite accurate\n   */\n  getCurrentLocation() {\n\n    // `api1` - Public HTTP API to search the geolocation of IP addresses\n    const api1 = 'http://freegeoip.net/json/';\n    // `api2` - Google API get formatted_address from google maps api json\n    const api2 = 'http://maps.googleapis.com/maps/api/geocode/json?latlng=';\n\n    return Observable.create(observer => {\n      this.http.get(api1).map(res => res.json())\n        .subscribe((position) => {\n          this.http.get(api2 + position.latitude + ',' + position.longitude + '&sensor=true')\n            .map(res => res.json())\n            .subscribe(res => {\n              let address = res.results[0];\n              if (address) {\n                let location = {\n                  address: address.formatted_address,\n                  latitude: position.latitude,\n                  longitude: position.longitude\n                };\n                observer.next(location);\n              }\n            });\n        });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve User Friends Location\n   * --------------------------------------------------------------\n   * @method getFriendsLocation\n   * This funtion collect friends location data from database and apply Haversine rules to calculate\n   * users location between current user location and target user.\n   * \n   * @param uid                 Current User ID\n   * @param currentLocation     Current User Location\n   */\n  getFriendsLocation(uid, currentLocation) {\n    let promise = new Promise((resolve, reject) => {\n      this.afDB.list(`/friends-location/${uid}`).valueChanges().subscribe((list: any) => {\n        let friendsLocation = list.filter(elm => elm.isShareLocation == true);\n        const locations = this.applyHaversine(currentLocation, friendsLocation);\n        locations.sort((locationA, locationB) => {\n          return locationA.distance - locationB.distance;\n        });\n        resolve(locations);\n      }, error => {\n        reject(error);\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Haversine Formula\n   * --------------------------------------------------------------\n   * @method applyHaversine\n   * This function calculate great-circle distances between two points on a sphere\n   * from their longitudes and latitudes.\n   * @param currentLocation     Point of Current User Location\n   * @param friendsLocation     Point of Target User Location\n   */\n  applyHaversine(currentLocation, friendsLocation) {\n    let usersLocation = {\n      lat: currentLocation.latitude,\n      lng: currentLocation.longitude\n    };\n    friendsLocation.map((location) => {\n      let placeLocation = {\n        lat: location.latitude,\n        lng: location.longitude\n      };\n      location.distance = this.getDistanceBetweenPoints(\n        usersLocation,\n        placeLocation,\n        'miles'\n      ).toFixed(2);\n    });\n    return friendsLocation;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Distance Between Points\n   * --------------------------------------------------------------\n   * @method getDistanceBetweenPoints\n   * To find the distance between two points (x1,y1) and (x2,y2)\n   */\n  getDistanceBetweenPoints(start, end, units) {\n    let earthRadius = {\n      miles: 3958.8,\n      km: 6371\n    };\n    let R = earthRadius[units || 'miles'];\n\n    let lat1 = start.lat;\n    let lon1 = start.lng;\n    let lat2 = end.lat;\n    let lon2 = end.lng;\n\n    let dLat = this.toRad((lat2 - lat1));\n    let dLon = this.toRad((lon2 - lon1));\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let d = R * c;\n\n    return d;\n  }\n\n  toRad(x) {\n    return x * Math.PI / 180;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Update User Share Location Status\n   * --------------------------------------------------------------\n   * @method updateShareLocation    This function update user share location status.\n   * Share location will be updated on user own profile `users` and user friends locaton `friends-location`\n   * @param uid                     Current User ID\n   * @param isShareLocation         User Location Share Status \n   */\n  updateShareLocation(uid, isShareLocation) {\n    let fannedOutData = {};\n    let promise = new Promise((resolve, reject) => {\n      // Update user own record\n      fannedOutData['/users/' + uid + '/' + 'isShareLocation'] = isShareLocation;\n      this.dbRef.ref.update(fannedOutData);\n\n      // Update user friends location\n      this.sharedProvider.getUserFriendIds(uid).then((friends: any) => {\n        friends.forEach(element => {\n          fannedOutData['/friends-location/' + element + '/' + uid + '/' + 'isShareLocation'] = isShareLocation;\n          this.dbRef.ref.update(fannedOutData);\n        });\n      });\n      resolve('success');\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Add Friend Location\n   * --------------------------------------------------------------\n   * @method addFriendLocationById\n   * @param uid1 \n   * @param uid2 \n   */\n  addFriendLocationById(uid1, uid2) {\n    let user1Info: any = {};\n    let user2Info: any = {};\n\n    let promise = new Promise((resolve, reject) => {\n      this.sharedProvider.getUserInfoByUserId(uid1).then((user1: any) => {\n        this.sharedProvider.getUserInfoByUserId(uid2).then((user2: any) => {\n\n          if (user1) {\n            user1Info.uid = uid1;\n            user1Info.userName = user1.name;\n            user1Info.userImage = user1.image;\n            if (user1.isShareLocation && user1.location) {\n              user1Info.latitude = user1.location.latitude;\n              user1Info.longitude = user1.location.longitude;\n              user1Info.address = user1.location.address;\n              user1Info.isShareLocation = user1.isShareLocation;\n            }\n          }\n          if (user2) {\n            user2Info.uid = uid2;\n            user2Info.userName = user2.name;\n            user2Info.userImage = user2.image;\n            if (user2.isShareLocation && user2.location) {\n              user2Info.latitude = user2.location.latitude;\n              user2Info.longitude = user2.location.longitude;\n              user2Info.address = user2.location.address;\n              user2Info.isShareLocation = user2.isShareLocation;\n            }\n          }\n          this.afDB.database.ref(`/friends-location/${uid2}/${uid1}`).update(user1Info);\n          this.afDB.database.ref(`/friends-location/${uid1}/${uid2}`).update(user2Info);\n          resolve('success');\n        }).catch(err => {\n          reject(err);\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n    return promise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/friends-location-map/friends-location-map.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of Admob Free.\n * Native plugin - https://ionicframework.com/docs/native/admob-free/\n * File path - '../../../src/providers/admob-free/admob-free'\n */\n\nimport { Injectable } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { AdMobFree, AdMobFreeBannerConfig, AdMobFreeInterstitialConfig } from '@ionic-native/admob-free';\nimport { AdmobConfig } from '../../config/admob';\n\n@Injectable()\nexport class AdmobFreeProvider {\n\n  private admobId;\n  public bannerPrepared: boolean = false;\n  public interstitialPrepared: boolean = false;\n  public bannerConfig: AdMobFreeBannerConfig;\n  public bannerSizeOpts: any;\n  public bannerAtTop: boolean = false;\n  public bannerOverlap: boolean = true;\n  public adAutoShow: boolean = true;\n  public bannerSizes = [\n    {\n      android: {\n        BANNER: 'BANNER',\n        IAB_BANNER: 'IAB_BANNER',\n        IAB_LEADERBOARD: 'IAB_LEADERBOARD',\n        IAB_MRECT: 'IAB_MRECT',\n        LARGE_BANNER: 'LARGE_BANNER',\n        SMART_BANNER: 'SMART_BANNER',\n        FLUID: 'FLUID',\n        FULL_BANNER: 'FULL_BANNER',\n        LEADERBOARD: 'LEADERBOARD',\n        MEDIUM_RECTANGLE: 'MEDIUM_RECTANGLE',\n        SEARCH: 'SEARCH',\n        WIDE_SKYSCRAPER: 'WIDE_SKYSCRAPER'\n      }\n    },\n    {\n      ios: {\n        BANNER: 'BANNER',\n        IAB_BANNER: 'IAB_BANNER',\n        IAB_LEADERBOARD: 'IAB_LEADERBOARD',\n        IAB_MRECT: 'IAB_MRECT',\n        LARGE_BANNER: 'LARGE_BANNER',\n        SMART_BANNER: 'SMART_BANNER',\n        FLUID: 'FLUID'\n      }\n    }\n  ];\n  public interstitialConfig: AdMobFreeInterstitialConfig;\n\n  constructor(private platform: Platform,\n    private admobFree: AdMobFree) {\n\n    this.platform.ready().then(() => {\n      // For Android\n      if (platform.is('android')) {\n        this.admobId = {\n          banner: AdmobConfig.banner,\n          interstitial: AdmobConfig.interstitial\n        };\n        this.bannerSizeOpts = this.bannerSizes[0]['android'];\n      }\n\n      // For iOS\n      if (platform.is('ios')) {\n        this.admobId = {\n          banner: AdmobConfig.banner,\n          interstitial: AdmobConfig.interstitial\n        };\n        this.bannerSizeOpts = this.bannerSizes[1]['ios'];\n      }\n      this.init();\n    });\n  }\n\n  /**\n   * AdMob initialising\n   */\n  init() {\n    // Not found any Admob\n    if (!this.admobFree) {\n      console.log(\"No AdMob?\");\n      return;\n    }\n\n    // Initialise other default config options for banner\n    this.bannerConfig = {\n      overlap: true,\n      offsetTopBar: true,\n      isTesting: true,\n      size: this.bannerSizeOpts,\n      bannerAtTop: this.bannerAtTop,\n      autoShow: this.adAutoShow\n    }\n    this.admobFree.banner.config(this.bannerConfig);\n\n    // Initialise other default config options for interstitial\n    this.interstitialConfig = {\n      isTesting: true,\n      autoShow: this.adAutoShow\n    }\n\n    this.admobFree.interstitial.config(this.interstitialConfig);\n  }\n\n  /**\n   * Prepare Banner\n   */\n  prepareBanner(): Promise<any> {\n    this.bannerConfig.id = this.admobId.banner;\n    this.admobFree.banner.config(this.bannerConfig);\n    return this.admobFree.banner.prepare()\n      .then(() => {\n        this.bannerPrepared = true;\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  /**\n   * Remove Banner\n   */\n  removeBanner() {\n    this.admobFree.banner.remove()\n      .then(() => {\n        this.bannerPrepared = false;\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  /**\n   * Prepare Interstitial\n   */\n  prepareInterstitial(): Promise<any> {\n    this.interstitialConfig.id = this.admobId.interstitial;\n    this.admobFree.interstitial.config(this.interstitialConfig);\n    return this.admobFree.interstitial.prepare()\n      .then(() => {\n        this.interstitialPrepared = true;\n      })\n      .catch((err) => {\n        console.error(err);\n      })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/admob-free/admob-free.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 182;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 182\n// module chunks = 28","var map = {\n\t\"../pages/authentication/forget-password/forget-password.module\": [\n\t\t740,\n\t\t27\n\t],\n\t\"../pages/authentication/lead-landing/lead-landing.module\": [\n\t\t737,\n\t\t26\n\t],\n\t\"../pages/authentication/sign-in/sign-in.module\": [\n\t\t739,\n\t\t11\n\t],\n\t\"../pages/authentication/sign-up/sign-up.module\": [\n\t\t738,\n\t\t8\n\t],\n\t\"../pages/chat/chat-box/chat-box.module\": [\n\t\t745,\n\t\t7\n\t],\n\t\"../pages/chat/chat-contacts/chat-contacts.module\": [\n\t\t741,\n\t\t25\n\t],\n\t\"../pages/chat/chat-recent-history/chat-recent-history.module\": [\n\t\t744,\n\t\t6\n\t],\n\t\"../pages/chat/chat.module\": [\n\t\t742,\n\t\t24\n\t],\n\t\"../pages/comments/comments.module\": [\n\t\t743,\n\t\t4\n\t],\n\t\"../pages/discover-people/discover-people.module\": [\n\t\t750,\n\t\t23\n\t],\n\t\"../pages/edit-profile/edit-profile.module\": [\n\t\t746,\n\t\t22\n\t],\n\t\"../pages/email-change/email-change.module\": [\n\t\t752,\n\t\t10\n\t],\n\t\"../pages/followers/followers.module\": [\n\t\t747,\n\t\t21\n\t],\n\t\"../pages/following/following.module\": [\n\t\t748,\n\t\t20\n\t],\n\t\"../pages/friend-request/friend-request.module\": [\n\t\t749,\n\t\t19\n\t],\n\t\"../pages/friends-location-list/friends-location-list.module\": [\n\t\t751,\n\t\t18\n\t],\n\t\"../pages/friends-location-map/friends-location-map.module\": [\n\t\t753,\n\t\t17\n\t],\n\t\"../pages/friends/friends.module\": [\n\t\t757,\n\t\t16\n\t],\n\t\"../pages/home/home.module\": [\n\t\t755,\n\t\t15\n\t],\n\t\"../pages/news-feed/news-feed.module\": [\n\t\t754,\n\t\t3\n\t],\n\t\"../pages/notification/notification.module\": [\n\t\t756,\n\t\t2\n\t],\n\t\"../pages/password-change/password-change.module\": [\n\t\t760,\n\t\t9\n\t],\n\t\"../pages/post/post.module\": [\n\t\t758,\n\t\t14\n\t],\n\t\"../pages/profile/profile.module\": [\n\t\t759,\n\t\t1\n\t],\n\t\"../pages/settings/settings.module\": [\n\t\t762,\n\t\t13\n\t],\n\t\"../pages/share-location/share-location.module\": [\n\t\t761,\n\t\t12\n\t],\n\t\"../pages/single-post/single-post.module\": [\n\t\t764,\n\t\t5\n\t],\n\t\"../pages/user-public-profile/user-public-profile.module\": [\n\t\t763,\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids)\n\t\treturn Promise.reject(new Error(\"Cannot find module '\" + req + \"'.\"));\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(ids[0]);\n\t});\n};\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 227;\nmodule.exports = webpackAsyncContext;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 227\n// module chunks = 28","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of Shared.\n * File path - '../../../src/providers/shared/shared'\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { AngularFireDatabase } from 'angularfire2/database';\n\n@Injectable()\nexport class SharedProvider {\n\n  /**\n   * Database reference\n   */\n  dbRef: any;\n\n  constructor(private db: AngularFireDatabase) {\n    this.dbRef = this.db.database.ref();\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Add User To User Following List\n   * --------------------------------------------------------------\n   * @method addUserInFollowingList\n   * @param currentUserId \n   * @param targetUserId \n   */\n  addUserInFollowingList(currentUserId, targetUserId) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/following/${currentUserId}`).child(targetUserId).set(true)\n        .then((success: any) => {\n          resolve('success');\n        });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Add User To User Follower List\n   * --------------------------------------------------------------\n   * @method addUserInFollowerList\n   * @param currentUserId \n   * @param targetUserId \n   */\n  addUserInFollowerList(currentUserId, targetUserId) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/followers/${targetUserId}`).child(currentUserId).set(true)\n        .then((success: any) => {\n          resolve('success');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Increase User Following Count\n   * --------------------------------------------------------------\n   */\n  increaseUserFollowingCount = (userId) => {\n    const databaseRef = this.db.database.ref('users').child(userId).child('totalFollowing');\n\n    databaseRef.transaction(function (current) {\n\n      return current = (current || 0) + 1;\n\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Increase User Followers Count\n   * --------------------------------------------------------------\n   */\n  increaseUserFollowersCount = (userId) => {\n    const databaseRef = this.db.database.ref('users').child(userId).child('totalFollowers');\n\n    databaseRef.transaction(function (current) {\n\n      return current = (current || 0) + 1;\n\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Recent User List\n   * --------------------------------------------------------------\n   * @method getRecentUserListById\n   * This function retrieve recent user list from database.\n   * \n   * @param userId    Current User ID\n   */\n  getRecentUserListById(userId) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/users`).limitToLast(30).orderByKey().on('value', recentUserList => {\n        const values = Object.keys(recentUserList.val()).map(key => recentUserList.val()[key]).map(x => x);\n        const excludeCurrentUser = values.filter((n) => n.uid !== userId);\n        resolve(excludeCurrentUser);\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Get User Information By User ID\n   * --------------------------------------------------------------\n   */\n  getUserInfoByUserId = (userId) => new Promise((resolve, reject) => {\n    this.db.database.ref(`/users/` + userId)\n      .once('value', (snapuser) => {\n        if (snapuser.exists()) {\n          let userInfo = snapuser.val();\n          resolve(userInfo);\n        }\n      }).catch((err: any) => {\n        reject(err);\n      })\n  });\n\n  /**\n   * --------------------------------------------------------------\n   * Unfollow User\n   * --------------------------------------------------------------\n   * @method unfollowUser\n   * \n   * This function unfollow someone. To unfollow someone remove target user from following\n   * and followers list and decrease user following and followers count.\n   * \n   * @param userId1\n   * @param userId2\n   */\n  unfollowUser(userId1, userId2) {\n    let promise = new Promise((resolve, reject) => {\n      this.removeUserFromFollowingList(userId1, userId2);\n      this.removeUserFromFollowerList(userId1, userId2);\n\n      this.decreaseUserFollowingCount(userId1);\n      this.decreaseUserFollowersCount(userId2);\n      resolve('success');\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Remove User From Following List\n   * --------------------------------------------------------------\n   * @method removeUserFromFollowingList\n   * @param userId1\n   * @param userId2\n   */\n  removeUserFromFollowingList(userId1, userId2) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/following/${userId1}`).child(userId2).remove()\n        .then(() => {\n          resolve('Removed');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Remove User From Followers List\n   * --------------------------------------------------------------\n   * @method removeUserFromFollowerList\n   * @param userId1\n   * @param userId2\n   */\n  removeUserFromFollowerList(userId1, userId2) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/followers/${userId2}`).child(userId1).remove()\n        .then(() => {\n          resolve('Removed');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Decrease User Following Count\n   * --------------------------------------------------------------\n   */\n  decreaseUserFollowingCount = (userId) => {\n    const databaseRef = this.db.database.ref('users').child(userId).child('totalFollowing');\n\n    databaseRef.transaction(function (current) {\n\n      return current = (current || 0) - 1;\n\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Decrease User Followers Count\n   * --------------------------------------------------------------\n   */\n  decreaseUserFollowersCount = (userId) => {\n    const databaseRef = this.db.database.ref('users').child(userId).child('totalFollowers');\n\n    databaseRef.transaction(function (current) {\n\n      return current = (current || 0) - 1;\n\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve User Friend ID's\n   * --------------------------------------------------------------\n   * @method getUserFriendIds     This function will load particulat user\n   * all friend ID's from the database.\n   * \n   * @param userId \n   */\n  getUserFriendIds(userId) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/users/${userId}/friends/`).on('value', snapshot => {\n        if (snapshot.exists()) {\n          resolve(Object.keys(snapshot.val()));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Exclude Posts from Target User Newsfeed\n   * --------------------------------------------------------------\n   * @method removeNewsfeedPost   This function exclude the target user's posts from the\n   * current user news feed.\n   * @param uid         Current User ID\n   * @param postowner   Post Owner or \n   */\n  removeNewsfeedPost(uid, postowner) {\n    let promise = new Promise((resolve, reject) => {\n      const ref = this.db.database.ref(`/newsfeed/${uid}`);\n      const query = ref.orderByChild('uid').equalTo(postowner);\n      query.once('value').then(function (snapshot) {\n        snapshot.forEach(function (childSnapshot) {\n          ref.child(childSnapshot.key).remove();\n        });\n      });\n    });\n    return promise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/shared/shared.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of authentication,\n * All the authentication methods are written in this file. \n * Which connects directly to the Firebase database\n * File path - '../../../src/providers/authentication/authentication'\n */\n\nimport { Injectable } from '@angular/core';\nimport { Platform, App } from 'ionic-angular';\nimport { Observable } from 'rxjs/Observable';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport * as firebase from 'firebase/app';\nimport { Facebook } from '@ionic-native/facebook';\nimport { StorageProvider } from '../../providers/utils/storage';\nimport { SharedProvider } from '../shared/shared';\nimport { UserProvider } from '../user/user';\n\n@Injectable()\nexport class AuthenticationProvider {\n\n  constructor(private platform: Platform,\n    private afAuth: AngularFireAuth,\n    private db: AngularFireDatabase,\n    private fb: Facebook,\n    private storageProvider: StorageProvider,\n    private app: App,\n    private sharedProvider: SharedProvider,\n    private userProvider: UserProvider,\n  ) { }\n\n  /**\n   * --------------------------------------------------------------\n   * User Registration\n   * --------------------------------------------------------------\n   * @method  registration\n   * @param   credentials\n   * @returns { Observable }\n   */\n  registration = (credentials: any) => {\n\n    let userId: any; // User ID\n    let userObj: any = {}; // User Data\n\n    // Create new Observable\n    return Observable.create(observer => {\n      return this.afAuth.auth\n        .createUserWithEmailAndPassword(credentials.email, credentials.password)\n        .then((user) => {\n\n          // The new user uid replace with this userId\n          userId = user.uid;\n\n          // Make a user object\n          userObj = {\n            name: credentials.displayName, // User name\n            email: user.email, // User email address\n            emailVerified: false, // Initially define email verified to false\n            provider: 'email', // Define Provider to `email` \n            image: 'https://s3-us-west-2.amazonaws.com/fulcrumy-ionic2/socialapp/profile-photo.png', // User default image\n            uid: userId, // User Id\n            isShareLocation: credentials.isShareLocation // Location Status\n          }\n          if (credentials.location) {\n            userObj.location = credentials.location;\n          }\n\n          // Update User Information\n          this.db.database.ref(`/users/${userId}`).set(userObj);\n\n          // Add this user in this user following list\n          this.sharedProvider.addUserInFollowingList(userId, userId);\n\n          // Save user information in localstorage\n          this.storageProvider.set(userId, userObj.name, userObj.email, userObj.image)\n            .then(() => {\n              observer.next('success');\n            }, function (error) {\n              observer.error(error);\n            });\n        })\n        // Handle authentication error\n        .catch((error: any) => {\n          if (error) {\n            switch (error.code) {\n              case 'INVALID_EMAIL':\n                observer.error('E-mail invalid.');\n                break;\n              case 'EMAIL_TAKEN':\n                observer.error('This email already taken');\n                break;\n              case 'NETWORK_ERROR':\n                observer.error('NETWORK ERROR');\n                break;\n              default:\n                observer.error(error);\n            }\n          }\n        });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Login With User Email Address\n   * --------------------------------------------------------------\n   * @method    loginWithEmail\n   * @param     credentials\n   * @returns   { Observable }\n   */\n  loginWithEmail = (email: string, password: string) => {\n\n    let userId: any; // UserId\n\n    // Create new Observable\n    return Observable.create(observer => {\n\n      this.afAuth.auth.signInWithEmailAndPassword(email, password)\n        .then((data: any) => {\n\n          // The new user uid replace with this userId\n          userId = data.uid;\n\n          // Get user Information\n          this.sharedProvider.getUserInfoByUserId(userId)\n            .then((user: any) => {\n\n              // Save user information in localstorage\n              this.storageProvider.set(userId, user.name, user.email, user.image).then(() => {\n                observer.next(data);\n              }, function (error) {\n                observer.error(error);\n              });\n            })\n            .catch((err: any) => {\n              observer.error(err);\n            });\n        })\n        .catch((err: any) => {\n          observer.error(err);\n        });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Login With Facebook\n   * --------------------------------------------------------------\n   * @method  loginWithFacebook\n   * @returns { Observable }\n   */\n  loginWithFacebook = () => {\n\n    let userObj: any = {}; // User Object\n\n    // Create a new Observable\n    return Observable.create(observer => {\n\n      // For the Cordova platform\n      if (this.platform.is('cordova')) {\n\n        // Call Facebook’s native plugin to get the user to log-in with Facebook.\n        return this.fb.login(['public_profile', 'email'])\n          .then((res: any) => {\n\n            // Get facebook credential information\n            const provider = firebase.auth.FacebookAuthProvider.credential(res.authResponse.accessToken);\n\n            // Get the token from facebook auth provider and sign in with this credentials in firebase\n            return this.afAuth.auth.signInWithCredential(provider)\n              .then((res: any) => {\n\n                userObj = {\n                  name: res.displayName,\n                  email: res.email,\n                  provider: 'facebook',\n                  image: res.photoURL,\n                  uid: res.uid\n                }\n\n                // Update user Information\n                this.userProvider.updateUserData(userObj)\n                  .then(() => {\n                    // Save user information in localstorage\n                    this.storageProvider.set(userObj.uid, userObj.name, userObj.email, userObj.image)\n                      .then(() => {\n                        observer.next();\n                      }, function (error) {\n                        observer.error(error);\n                      });\n                  });\n              })\n              .catch((err: any) => {\n                observer.error(err);\n              });\n          })\n          .catch((err: any) => {\n            observer.error(err);\n          });\n      }\n      // Not Cordova Platform\n      else {\n        // To sign in with a pop-up window, call signInWithPopup\n        this.afAuth.auth.signInWithPopup(new firebase.auth.FacebookAuthProvider())\n          .then((res) => {\n            // Make signed-in user info.\n            userObj = {\n              name: res.user.displayName,\n              email: res.user.email,\n              provider: 'facebook',\n              image: res.user.photoURL,\n              uid: res.user.uid\n            }\n\n            // Update user information\n            this.userProvider.updateUserData(userObj).then(() => {\n              // Save user information in localstorage\n              this.storageProvider.set(userObj.uid, userObj.name, userObj.email, userObj.image).then(() => {\n                observer.next();\n              }, function (error) {\n                observer.error(error);\n              });\n            });\n          })\n          .catch((err: any) => {\n            observer.error(err);\n          });\n      }\n    });\n  }\n\n  /***\n   * --------------------------------------------------------------\n   * Send Password Reset Request to User Email Address\n   * --------------------------------------------------------------\n   * @method    sendPasswordResetEmail\n   * @param     email     User Current Email Address\n   * @returns   { Observable }\n   */\n  sendPasswordResetEmail(email) {\n    return Observable.create(observer => {\n      firebase.auth().sendPasswordResetEmail(email).then(function (res) {\n        observer.next('We will email you a link which will allow you to reset your password.');\n      }, function (error) {\n        observer.error(error);\n      });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Update Password\n   * --------------------------------------------------------------\n   * @method updatePassword  This function re-authenticate with user credentials\n   * and then update user password.\n   * @param oldPassword      User Current Password\n   * @param newPassword      User New Password\n   */\n  updatePassword(oldPassword, newPassword) {\n    const promise = new Promise((resolve, reject) => {\n\n      // Get current user ID\n      let user = this.afAuth.auth.currentUser;\n\n      // Get credentials of current user\n      const credentials = firebase.auth.EmailAuthProvider.credential(user.email, oldPassword);\n\n      // Prompt the user to re-provide their sign-in credentials\n      user.reauthenticateWithCredential(credentials).then((res) => {\n\n        // Update user password\n        user.updatePassword(newPassword).then((updateRes) => {\n          resolve(updateRes);\n        }).catch(err => {\n          reject(err);\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Update Email Address\n   * --------------------------------------------------------------\n   * @method updateEmail  This function re-authenticate with user credentials\n   * and then update user email address.\n   * @param oldEmail      User Current Email Address\n   * @param password      User Current Password\n   * @param newEmail      User New Email Address\n   */\n  updateEmail(oldEmail, password, newEmail) {\n\n    // Get current user ID\n    let user = this.afAuth.auth.currentUser;\n\n    let promise = new Promise((resolve, reject) => {\n\n      // Get credentials of current user\n      const credentials = firebase.auth.EmailAuthProvider.credential(oldEmail, password);\n\n      // Prompt the user to re-provide their sign-in credentials\n      user.reauthenticateWithCredential(credentials).then((res) => {\n\n        // Update New Email\n        user.updateEmail(newEmail).then((updateRes) => {\n          let obj = {\n            uid: user.uid,\n            email: newEmail\n          }\n          // Update user data in effective fields\n          this.userProvider.updateUserData(obj).then(() => {\n            resolve(updateRes);\n          }).catch(err => {\n            reject(err);\n          });\n        }).catch(err => {\n          reject(err);\n        });\n      }).catch(err => {\n        reject(err);\n      })\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Logout\n   * --------------------------------------------------------------\n   * @method logout\n   */\n  logout() {\n    this.storageProvider.remove()\n      .then(() => {\n        // Go back to the landing page\n        this.app.getRootNav().setRoot('LeadLandingPage');\n        // Signout current user\n        this.afAuth.auth.signOut();\n        // Reload information of current user\n        this.afAuth.auth.currentUser.reload();\n      });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/authentication/authentication.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of camera image\n * File path - '../../../src/providers/image/image'\n */\n\n// import modules\nimport { Injectable } from '@angular/core';\nimport { Camera, CameraOptions } from '@ionic-native/camera';\nimport { UtilsProvider } from '../../providers/utils/utils';\nimport * as firebase from 'firebase';\n\n@Injectable()\nexport class ImageProvider {\n\n\n  public base64Image: string; // base64 image path\n  storageRef: any; // storage reference\n\n  constructor(\n    private camera: Camera,\n    private utilsProvider: UtilsProvider) {\n\n    // Define Firebase storage ref\n    this.storageRef = firebase.storage().ref();\n  }\n\n  /**\n   * Open gallery option of user device\n   * @param uid Current userId\n   * @param type Identify page name\n   */\n  openGallery(uid, type) {\n\n    let imageRef: any; // Will be set any kind of image reference path\n\n    // Define promise\n    let promise = new Promise((resolve, reject) => {\n\n      // Define camera options\n      const cameraOptions: CameraOptions = {\n        quality: 50,\n        destinationType: this.camera.DestinationType.DATA_URL,\n        sourceType: this.camera.PictureSourceType.PHOTOLIBRARY,\n        allowEdit: true,\n        encodingType: this.camera.EncodingType.JPEG,\n        targetWidth: 500,\n        targetHeight: 500,\n        saveToPhotoAlbum: true\n      };\n\n      // Take a picture, or load one from the library.\n      this.camera.getPicture(cameraOptions).then((data: any) => {\n\n        // After pick one picture from the library, call a loader to process the next steps\n        this.utilsProvider.presentLoading();\n\n        // imageData is either a base64 encoded string or a file URI\n        // If it's base64:\n        this.base64Image = \"data:image/jpeg;base64,\" + data;\n\n        // Create a custom filename\n        const filename = Math.floor(Date.now() / 1000);\n\n        // Check the type option\n        // Get image reference on which we now put our image\n        if (type === 'post') {\n          imageRef = this.storageRef.child(`${uid}/post/images/${filename}.jpg`);\n        } else if (type === 'profile') {\n          imageRef = this.storageRef.child(`${uid}/profile/images/${filename}.jpg`);\n        }\n\n        // Use the putString() method that passing the base64 string and upload to firebase storage\n        imageRef.putString(this.base64Image, firebase.storage.StringFormat.DATA_URL).then((snapshot) => {\n          // On the image reference we call the getDownloadURL function for getting the image URL\n          imageRef.getDownloadURL().then(url => {\n            // Resolve this url to specific component\n            resolve(url);\n          });\n        }, err => {\n          reject(err);\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * Open camera of user device\n   * @param uid Current userId\n   * @param type Identify page name\n   */\n  openCamera(uid, type) {\n\n    let imageRef: any; // Will be set any kind of image reference path\n\n    // Define promise\n    let promise = new Promise((resolve, reject) => {\n\n      // Define camera options\n      const cameraOptions: CameraOptions = {\n        quality: 95,\n        destinationType: this.camera.DestinationType.DATA_URL,\n        sourceType: this.camera.PictureSourceType.CAMERA,\n        allowEdit: true,\n        encodingType: this.camera.EncodingType.JPEG,\n        targetWidth: 500,\n        targetHeight: 500,\n        saveToPhotoAlbum: true\n      };\n\n      // Take a picture, or load one from the library.\n      this.camera.getPicture(cameraOptions).then((data: any) => {\n\n        // imageData is either a base64 encoded string or a file URI\n        // If it's base64:\n        this.base64Image = \"data:image/jpeg;base64,\" + data;\n\n        // Create a custom filename\n        const filename = Math.floor(Date.now() / 1000);\n\n        // Check the type option\n        // Get image reference on which we now put our image\n        if (type === 'post') {\n          imageRef = this.storageRef.child(`${uid}/post/images/${filename}.jpg`);\n        } else if (type === 'profile') {\n          imageRef = this.storageRef.child(`${uid}/profile/images/${filename}.jpg`);\n        }\n\n        // Use the putString() method that passing the base64 string and upload to firebase storage\n        imageRef.putString(this.base64Image, firebase.storage.StringFormat.DATA_URL).then((snapshot) => {\n          // On the image reference we call the getDownloadURL function for getting the image URL\n          imageRef.getDownloadURL().then(url => {\n            // Resolve this url to specific component\n            resolve(url);\n          });\n        }, err => {\n          reject(err);\n        });\n      }).catch((err: any) => {\n        if (err) {\n          reject(err);\n        }\n      });\n    });\n    return promise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/image/image.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { firebaseConfig } from '../config/firebase';\nimport { AngularFireModule } from 'angularfire2';\nimport { AngularFireDatabaseModule } from 'angularfire2/database';\nimport { AngularFireAuthModule } from 'angularfire2/auth';\nimport { HttpModule } from '@angular/http';\nimport { MyApp } from './app.component';\n\nimport { IonicStorageModule } from '@ionic/storage';\nimport { Facebook } from '@ionic-native/facebook';\nimport { Network } from '@ionic-native/network';\nimport { Geolocation } from '@ionic-native/geolocation';\nimport { ImagePicker } from '@ionic-native/image-picker';\nimport { Camera } from '@ionic-native/camera';\nimport { Keyboard } from '@ionic-native/keyboard';\nimport { SocialSharing } from '@ionic-native/social-sharing';\nimport { AdMobFree } from '@ionic-native/admob-free';\n\nimport { AuthenticationProvider } from '../providers/authentication/authentication';\nimport { ChatProvider } from '../providers/chat/chat';\nimport { FriendsProvider } from '../providers/friends/friends';\nimport { UserProvider } from '../providers/user/user';\nimport { ConnectionsProvider } from '../providers/connections/connections';\nimport { PostProvider } from '../providers/post/post';\nimport { UtilsProvider } from '../providers/utils/utils';\nimport { StorageProvider } from '../providers/utils/storage';\nimport { ImageProvider } from '../providers/image/image';\nimport { NotificationProvider } from '../providers/notification/notification';\nimport { SharedProvider } from '../providers/shared/shared';\nimport { AdmobFreeProvider } from '../providers/admob-free/admob-free';\nimport { FriendsLocationMapProvider } from '../providers/friends-location-map/friends-location-map';\n\n@NgModule({\n  declarations: [\n    MyApp,\n  ],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(MyApp),\n    IonicStorageModule.forRoot(),\n    AngularFireModule.initializeApp(firebaseConfig),\n    AngularFireDatabaseModule,\n    AngularFireAuthModule,\n    HttpModule\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    { provide: ErrorHandler, useClass: IonicErrorHandler },\n    Facebook,\n    Geolocation,\n    ImagePicker,\n    Camera,\n    Keyboard,\n    Network,\n    AdMobFree,\n    SocialSharing,\n    AuthenticationProvider,\n    UtilsProvider,\n    StorageProvider,\n    SharedProvider,\n    UserProvider,\n    PostProvider,\n    ConnectionsProvider,\n    ChatProvider,\n    FriendsProvider,\n    StorageProvider,\n    ImageProvider,\n    NotificationProvider,\n    SharedProvider,\n    AdmobFreeProvider,\n    FriendsLocationMapProvider\n  ]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of Shared.\n * File path - '../../../src/providers/utils/storage'\n */\n\nimport { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\n\n@Injectable()\nexport class StorageProvider {\n\n  constructor(\n    private storage: Storage) {\n  }\n\n  set(uid, name, email, image) {\n    let promise = new Promise((resolve, reject) => {\n      var object = { userId: uid, name: name, email: email, image: image };\n      this.storage.set('userInfo', JSON.stringify(object));\n      resolve('success');\n    });\n    return promise;\n  }\n\n  get() {\n    let promise = new Promise((resolve, reject) => {\n      this.storage.get('userInfo').then((data) => {\n        resolve(JSON.parse(data));\n      }).catch(err => {\n        reject(err);\n      })\n    });\n    return promise;\n  };\n\n  remove() {\n    let promise = new Promise((resolve, reject) => {\n      this.storage.remove('userInfo').then(() => {\n        this.storage.clear();\n        resolve('success');\n      }).catch(err => {\n        reject(err);\n      });\n    });\n    return promise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/utils/storage.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of notification,\n * All the notification related methods are written in this file. \n * Which connects directly to the Firebase database.\n * File path - '../../../src/providers/notification/notification'\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { NotificationModel } from '../../models/notification';\nimport { SharedProvider } from '../shared/shared';\n\n@Injectable()\nexport class NotificationProvider {\n\n  // Model of notification\n  private _notiModel = {} as NotificationModel;\n  dbRef: any;\n\n  constructor(private db: AngularFireDatabase,\n    private sharedProvider: SharedProvider) {\n    this.dbRef = this.db.database.ref();\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Create Notification\n   * --------------------------------------------------------------\n   * @method createNotification\n   * This function create new notification when a user likes, comments or follow\n   * to another user. Then the user of the opposite will get a notification.\n   * \n   * @param sender          Sender User ID\n   * @param receiver        Receiver User ID\n   * @param type            Type of Notification\n   * @param postkey         Post Unique Key\n   */\n  createNotification(sender, receiver, type, postkey?) {\n    const fannedOutData = {};\n    this._notiModel.key = this.db.database.ref().push().key; // Generate New Notification Key\n    this._notiModel.sender = sender;\n    this._notiModel.receiver = receiver;\n    this._notiModel.type = type;\n    this._notiModel.status = 'unread';\n    this._notiModel.timestamp = new Date().getTime();\n    if (postkey) {\n      this._notiModel.postkey = postkey;\n    }\n    let promise = new Promise((resolve, reject) => {\n\n      // Update notification based on generated new notification key number `this._notiModel.key`\n      fannedOutData[`/notification/${this._notiModel.receiver}/${this._notiModel.key}`] = this._notiModel;\n      this.dbRef.ref.update(fannedOutData);\n\n      // Call `increaseTotalCount` function to increase total notification count number.\n      this.increaseTotalCount(this._notiModel.receiver);\n\n      resolve('success');\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Increase Notification\n   * --------------------------------------------------------------\n   * @method increaseTotalCount\n   * \n   * This function increase particular user total notification count at\n   * `notification/{userId}` location database.\n   * @param userId\n   */\n  increaseTotalCount(userId) {\n    this.db.database.ref(`/notification/${userId}`).child(`total`)\n      .transaction(function (current) {\n        return current = (current || 0) + 1;\n      });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Total Unread Notification\n   * --------------------------------------------------------------\n   * @method totalUnreadNotification\n   * @param userId      Current user ID\n   * @return observer   Return total number of user unread notification\n   */\n  totalUnreadNotification(userId) {\n    return Observable.create(observer => {\n      this.db.object(`/notification/${userId}/total`).valueChanges()\n        .subscribe((data: any) => {\n          observer.next(data);\n        }, (err) => {\n          observer.error(err);\n        });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Total Friend Request\n   * --------------------------------------------------------------\n   * @param userId      Current user ID\n   * @return observer   Return total number of user pending friend request\n   */\n  totalFriendRequest(userId) {\n    return Observable.create(observer => {\n      this.db.list(`/friend-request/received/${userId}`).valueChanges()\n        .subscribe((data: any) => {\n          observer.next(data.length);\n        }, (err) => {\n          observer.error(err);\n        });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Make Total Unread Notification Zero\n   * --------------------------------------------------------------\n   * @method makeTotalNotificationZero\n   * This function make total notification will be zero, In the Database user\n   * notification locations\n   * \n   * @param userId    Current User Id\n   */\n  makeTotalNotificationZero(userId) {\n    return Observable.create(observer => {\n      this.db.database.ref(`/notification/${userId}/total`).set(0).then(() => {\n        observer.next();\n      }).catch(err => {\n        observer.error(err);\n      });\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Notifications\n   * --------------------------------------------------------------\n   * @method getNotificationById\n   * \n   * This method query inside `notification` location of database and retrieve user\n   * list of notification. And also call `this.sharedProvider.getUserInfoByUserId` this\n   * method to get user information for each notification, make a new array list of\n   * notification with user information called this by `newNotificationList`.\n   * \n   * @param uid       Current user Id\n   * @param lastkey   Last key of Notification\n   * @return promise { Resolved promise return `array` of notification and\n   * rejected promise return errors. }\n   * \n   */\n  getNotificationById(uid, lastkey?) {\n\n    let queryRef;\n    let notificationList, newNotificationList = [];\n    let count = 0;\n\n    let promise = new Promise((resolve, reject) => {\n\n      if (lastkey) {\n        queryRef = this.db.list(`/notification/${uid}`, ref => ref.orderByKey().limitToLast(15).endAt(lastkey));\n      } else {\n        queryRef = this.db.list(`/notification/${uid}`, ref => ref.orderByKey().limitToLast(5));\n      }\n\n      queryRef.valueChanges().subscribe((list: any) => {\n        notificationList = list.filter((n) => n.hasOwnProperty('key'));\n        notificationList.forEach(element => {\n          this.sharedProvider.getUserInfoByUserId(element.sender)\n            .then((user: any) => {\n              count++; // Increase count\n              newNotificationList.push(Object.assign(element, { userName: user.name, userImage: user.image }));\n              if (count === list.length) {\n                resolve(newNotificationList);\n              }\n            })\n            .catch(err => {\n              reject(err);\n            })\n        });\n      }, error => {\n        reject(error);\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Make Unread Notification To Read\n   * --------------------------------------------------------------\n   * @method readNotification\n   * \n   * This function make user unread notification to read by calling specific user\n   * `notification` location and update unread status to read.\n   * @param uid User Id\n   * @param key  Notification unique key\n   */\n  readNotification(uid, key) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/notification/${uid}/${key}`).update({ status: 'read' })\n        .then(() => {\n          resolve('success');\n        }).catch((err) => {\n          reject(err);\n        });\n    });\n    return promise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/notification/notification.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents admob configuration.\n * File path - '../../src/config/admob'\n */\n\nexport const AdmobConfig = {\n  \"banner\": \"ca-app-pub-xxxx\",\n  \"interstitial\": \"ca-app-pub-xxxx\"\n}\n\n\n// WEBPACK FOOTER //\n// ./src/config/admob.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents firebase configuration.\n * File path - '../../src/config/firebase'\n */\n\nexport const firebaseConfig = {\n  \"apiKey\": \"AIzaSyANegvAidYZl0iSXA2T_NHn82SV1m23p34\",\n  \"authDomain\": \"thaitravel-296ea.firebaseapp.com\",\n  \"databaseURL\": \"https://thaitravel-296ea.firebaseapp.com\",\n  \"projectId\": \"thaitravel-296ea\",\n  \"storageBucket\": \"thaitravel-296ea.appspot.com\",\n  \"messagingSenderId\": \"30657075679\"\n}\n\n\n// WEBPACK FOOTER //\n// ./src/config/firebase.ts","import { Component } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StorageProvider } from '../providers/utils/storage';\nimport { AdmobFreeProvider } from '../providers/admob-free/admob-free';\n\n@Component({\n  templateUrl: 'app.html'\n})\nexport class MyApp {\n  rootPage: any;\n\n  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen,\n    private storageProvider: StorageProvider, private admobFree: AdmobFreeProvider) {\n    platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      statusBar.styleDefault();\n      splashScreen.hide();\n      this.isLoggedIn();\n\n      // Show Interstitial Ad After 3 Minutes\n      setTimeout(() => {\n        this.prepareInterstitial();\n      }, 180000);\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Check User Is Logged In or Not\n   * --------------------------------------------------------------\n   */\n  async isLoggedIn() {\n    await this.storageProvider.get().then(success => {\n      if (success) {\n        this.rootPage = 'HomePage';\n      } else {\n        this.rootPage = 'LeadLandingPage';\n      }\n    }).catch(err => {\n      this.rootPage = 'LeadLandingPage';\n    })\n  }\n\n  /**\n   * Prepare and show admob Interstitial ad\n   */\n  prepareInterstitial() {\n    this.admobFree.prepareInterstitial();\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","\n/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of friends,\n * All the friends related methods are written in this file. \n * Which connects directly to the Firebase database.\n * File path - '../../../src/providers/friends/friends'\n */\n\nimport { Injectable } from '@angular/core';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { NotificationProvider } from '../notification/notification';\nimport { SharedProvider } from '../shared/shared';\nimport { ChatProvider } from '../chat/chat';\nimport { FriendsLocationMapProvider } from '../friends-location-map/friends-location-map';\n\n\n@Injectable()\nexport class FriendsProvider {\n\n  constructor(private db: AngularFireDatabase,\n    private notificationProvider: NotificationProvider,\n    private sharedProvider: SharedProvider,\n    private chatProvider: ChatProvider,\n    private locationProvider: FriendsLocationMapProvider) { }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Chat Friends List\n   * --------------------------------------------------------------\n   * @method getChatFriends     This method will return the user's friend list\n   * with the total unread chat message number of each contact.\n   * @param userId              Current User ID\n   * \n   */\n  async getChatFriends(userId) {\n\n    let count = 0;\n    let friendList = [];\n\n    const promise = new Promise((resolve, reject) => {\n\n      // Call shared proider `getUserFriendIds` method to get particular user friends Id\n      this.sharedProvider.getUserFriendIds(userId).then((friends: any) => {\n        if (friends) {\n\n          // Call chat provider `getChatThreadNotification` method to get all the friends of the\n          // Particular user unread chat notification number.\n          this.chatProvider.getChatThreadNotification(userId).then((notifications: any) => {\n\n            friends.forEach(element => {\n\n              const findTargetUser = notifications.find((n) => n.key === element);\n\n              // Call shared provider `getUserInfoByUserId` method to get particular user information\n              this.sharedProvider.getUserInfoByUserId(element).then((data) => {\n                count++;\n                if (findTargetUser) {\n                  friendList.push(Object.assign(data, { unreadMsg: findTargetUser.value }));\n                } else {\n                  friendList.push(data);\n                }\n                if (count === friends.length) {\n                  resolve(friendList);\n                }\n              });\n            });\n          });\n        }\n      })\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve List of Friends\n   * --------------------------------------------------------------\n   * @method getFriendList\n   * @param uid   User ID\n   */\n  async getFriendList(uid) {\n\n    let friendList = [];\n    let count = 0;\n\n    const promise = new Promise((resolve, reject) => {\n      // By calling share provider `getUserFriendIds` method to get list of\n      // friends list from firebase database\n      this.sharedProvider.getUserFriendIds(uid).then((friends: any) => {\n        if (friends) {\n          if (friends.length > 0) {\n            friends.forEach(element => {\n              // Call `this.sharedProvider.getUserInfoByUserId` to get particular user\n              // profile information\n              this.sharedProvider.getUserInfoByUserId(element).then((data) => {\n                count++;\n                friendList.push(Object.assign(data, { isFriends: true }));\n                if (count === friends.length) {\n                  resolve(friendList);\n                }\n              });\n            });\n          }\n        } else {\n          resolve(null);\n        }\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Add Friend Request\n   * --------------------------------------------------------------\n   * @method addFriendRequest   This function Send friend requests to the user and target user received\n   * friend request.\n   * @param senderId            Current User ID/Sender ID\n   * @param receiverId          Target User ID/Receiver ID\n   */\n  addFriendRequest(senderId, receiverId) {\n    const promise = new Promise((resolve, reject) => {\n\n      // Call `sendFriendRequest` function to add target user into the sender friend request list.\n      this.sendFriendRequest(senderId, receiverId);\n\n      // Call `receivedFriendRequest` function to add current user into the target user friend request list.\n      this.receivedFriendRequest(senderId, receiverId);\n\n      resolve('success');\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Send Friend Request\n   * --------------------------------------------------------------\n   * @method sendFriendRequest  This function add target user into the sender friend request list.\n   * @param senderId            Current User ID/Sender ID\n   * @param receiverId          Target User ID/Receiver ID\n   */\n  sendFriendRequest(senderId, receiverId) {\n    const promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/friend-request/send/${senderId}`).child(receiverId).set(true)\n        .then((success: any) => {\n          resolve('success');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Receive Friend Request\n   * --------------------------------------------------------------\n   * @method receivedFriendRequest  This function add current user into the target user friend request list.\n   * @param senderId                Current User ID/Sender ID\n   * @param receiverId              Target User ID/Receiver ID\n   */\n  receivedFriendRequest(senderId, receiverId) {\n    const promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/friend-request/received/${receiverId}`).child(senderId).set(true)\n        .then((success: any) => {\n          resolve('success');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve List of Friend Request\n   * --------------------------------------------------------------\n   * @method  getFriendRequestList\n   * @param   currentUserId     User ID\n   * @return  Promise           Return List of Friend Request\n   */\n  async getFriendRequestList(currentUserId) {\n    const newFrndReqList = [];\n    let count = 0;\n\n    const promise = new Promise((resolve, reject) => {\n      // By calling `this.getReceivedFriendRequestList` function to get list of\n      // received friend request list from firebase database\n      this.getReceivedFriendRequestList(currentUserId).then((frndReqList: any) => {\n        if (frndReqList) {\n          if (frndReqList.length > 0) {\n            frndReqList.forEach(element => {\n              // Call `this.sharedProvider.getUserInfoByUserId` to get particular user\n              // profile information\n              this.sharedProvider.getUserInfoByUserId(element).then(data => {\n                count++;\n                newFrndReqList.push(Object.assign(data));\n                if (count === frndReqList.length) {\n                  resolve(newFrndReqList);\n                }\n              });\n            });\n          }\n        }\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Confirm Friend Request\n   * --------------------------------------------------------------\n   * @method confirmFriendRequest\n   * This function works to accept/confirm the friend request. To be a friend,\n   * it must be added to the current and target user's following list with increase\n   * user's following count. In the same way, add user's followers list with increase\n   * user's followers count. To remove user from friend request list. User's have to\n   * add their friend list. Create one following notification. And Friend Location\n   * will be added to both user's Locations.\n   * \n   * @param targetUserId    Target user Id or who friend request sent\n   * @param currentUserId   Current userId or who received friend request\n   * @return promise\n   */\n  confirmFriendRequest(targetUserId, currentUserId) {\n\n    const promise = new Promise((resolve, reject) => {\n\n      // By calling `this.sharedProvider.addUserInFollowingList` method twice,\n      // Add current and target user's into their following list.\n      this.sharedProvider.addUserInFollowingList(currentUserId, targetUserId);\n      this.sharedProvider.addUserInFollowingList(targetUserId, currentUserId);\n      // By calling `this.sharedProvider.increaseUserFollowingCount` method twice,\n      // Increase current and target user's following count\n      this.sharedProvider.increaseUserFollowingCount(currentUserId);\n      this.sharedProvider.increaseUserFollowingCount(targetUserId);\n\n      // By calling `this.sharedProvider.addUserInFollowerList` method twice,\n      // Add current and target user's into their followers list.\n      this.sharedProvider.addUserInFollowerList(targetUserId, currentUserId);\n      this.sharedProvider.addUserInFollowerList(currentUserId, targetUserId);\n      // By calling `this.sharedProvider.increaseUserFollowersCount` method twice,\n      // Increase current and target user's followers count\n      this.sharedProvider.increaseUserFollowersCount(targetUserId);\n      this.sharedProvider.increaseUserFollowersCount(currentUserId);\n\n      // Call `cancelFriendRequest` function to remove user from friend request list\n      this.cancelFriendRequest(targetUserId, currentUserId);\n\n      // Call `addInFriendList` function twice, To add user's in friend list\n      this.addInFriendList(currentUserId, targetUserId);\n      this.addInFriendList(targetUserId, currentUserId);\n\n      // Call `this.notificationProvider.createNotification` method to create \n      // following user notification\n      this.notificationProvider.createNotification(currentUserId, targetUserId, 'following');\n\n      // Call `this.locationProvider.addFriendLocationById` method to add\n      // both user's friend location\n      this.locationProvider.addFriendLocationById(currentUserId, targetUserId);\n\n      // Resolve promise\n      resolve('success');\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Unfriend or Remove User From Friend List\n   * --------------------------------------------------------------\n   * @method unFriend         This function will exclude the user from the user friend list and unfriend user.\n   * @param currentUserId     Current User Id\n   * @param targetUserId      Target User Id\n   * \n   */\n  unFriend(currentUserId, targetUserId) {\n    const promise = new Promise((resolve, reject) => {\n      // Call shared provider `unfollowUser` method twice,\n      // To remove user's from the user following list\n      this.sharedProvider.unfollowUser(currentUserId, targetUserId);\n      this.sharedProvider.unfollowUser(targetUserId, currentUserId);\n\n      // Call `removeUserFromFriendList` function twice,\n      // To remove user's from the user friend list\n      this.removeUserFromFriendList(currentUserId, targetUserId);\n      this.removeUserFromFriendList(targetUserId, currentUserId);\n\n      // Call shared provider `removeNewsfeedPost` method twice,\n      // To remove newsfeed posts from users newsfeed\n      this.sharedProvider.removeNewsfeedPost(currentUserId, targetUserId);\n      this.sharedProvider.removeNewsfeedPost(targetUserId, currentUserId);\n\n      // Resolve promise\n      resolve('Success');\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Add In Friend List\n   * --------------------------------------------------------------\n   * @param userId1 Any user ID\n   * @param userId2 Any user ID\n   */\n  addInFriendList(userId1, userId2) {\n    const promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/users/${userId1}/friends`).child(userId2).set(true)\n        .then((success: any) => {\n          resolve('success');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Remove Someone From Friend List\n   * --------------------------------------------------------------\n   * @method removeUserFromFriendList   This function remove target user from current user\n   * friend list.\n   * @param userId1   Current User ID\n   * @param userId2   Target User ID \n   */\n  removeUserFromFriendList(userId1, userId2) {\n    const promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/users/${userId1}/friends`).child(userId2).remove()\n        .then(() => {\n          resolve('Removed');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Cancel/Decline Friend Request\n   * --------------------------------------------------------------\n   * @method cancelFriendRequest\n   * This function works to Cancel/Decline the friend request. To cancel user\n   * friend request call `removeReceivedFriendRequest` function to remove friend\n   * request from receiver list and call `removeSendFriendRequest` function to\n   * remove friend request from sender list.\n   * \n   * @param userId1   Target User ID\n   * @param userId2   Current User ID\n   */\n  cancelFriendRequest(userId1, userId2) {\n\n    let promise = new Promise((resolve, reject) => {\n      // Remove friend request from receiver list\n      this.removeReceivedFriendRequest(userId1, userId2);\n\n      // Remove friend request from sender list\n      this.removeSendFriendRequest(userId1, userId2);\n\n      // Resolve promise\n      resolve('Success');\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Remove user from received friend request list\n   * --------------------------------------------------------------\n   * @param userId1\n   * @param userId2\n   */\n  removeReceivedFriendRequest(userId1, userId2) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/friend-request/received/${userId2}`).child(userId1).remove()\n        .then(() => {\n          resolve('Removed');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Remove user from send friend request list\n   * --------------------------------------------------------------\n   * @param userId1\n   * @param userId2\n   */\n  removeSendFriendRequest(userId1, userId2) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/friend-request/send/${userId1}`).child(userId2).remove()\n        .then(() => {\n          resolve('Removed');\n        });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Get Received List of Friend Request\n   * --------------------------------------------------------------\n   * @method getReceivedFriendRequestList\n   * This function queries inside the database location at `friend-request/received`\n   * and populate particular user received friend request list.\n   * \n   * @param userId\n   * \n   */\n  getReceivedFriendRequestList(userId) {\n    const promise = new Promise((resolve, reject) => {\n      let ref = this.db.database.ref(`/friend-request/received/${userId}`);\n      ref.on('value', (snapshot) => {\n        if (snapshot.exists()) {\n          resolve(Object.keys(snapshot.val()));\n        } else {\n          resolve(null)\n        }\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Get User Send friend request list\n   * --------------------------------------------------------------\n   * @method getSendFriendRequestList\n   * This function query inside the location of database `friend-request/send`\n   * and populate particular user send friend request list.\n   * \n   * @param userId\n   * \n   */\n  getSendFriendRequestList(userId) {\n    const promise = new Promise((resolve, reject) => {\n      let ref = this.db.database.ref(`/friend-request/send/${userId}`);\n      ref.on('value', (snapshot) => {\n        if (snapshot.exists()) {\n          resolve(Object.keys(snapshot.val()));\n        } else {\n          resolve(null)\n        }\n      });\n    });\n    return promise;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/friends/friends.ts","/**\n * @author    Ionic Bucket <ionicbucket@gmail.com>\n * @copyright Copyright (c) 2017\n * @license   Fulcrumy\n * \n * This file represents a provider of connection,\n * All the connection methods are written in this file. \n * Which connects directly to the Firebase database\n * File path - '../../../src/providers/connections/connections'\n */\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { NotificationProvider } from '../notification/notification';\nimport { SharedProvider } from '../shared/shared';\nimport { FriendsProvider } from '../friends/friends';\n\n@Injectable()\n\nexport class ConnectionsProvider {\n\n  constructor(\n    private db: AngularFireDatabase,\n    private notificationProvider: NotificationProvider,\n    private sharedProvider: SharedProvider,\n    private friendsProvider: FriendsProvider) { }\n\n  /**\n   * --------------------------------------------------------------\n   * Discover Peoples/Suggested Users\n   * --------------------------------------------------------------\n   * @method getDiscoverPeoples\n   * \n   * @param userId      Current User ID\n   * @return            Observable\n   */\n  getDiscoverPeoples(userId) {\n\n    let filterUserList = [];\n\n    const promise = new Promise((resolve, reject) => {\n\n      this.getFollowingIds(userId).then((followingList: any) => {\n\n        this.friendsProvider.getReceivedFriendRequestList(userId).then((receivedFriendReq: any) => {\n\n          this.friendsProvider.getSendFriendRequestList(userId).then((sendFriendLists: any) => {\n\n            this.sharedProvider.getUserFriendIds(userId).then((friendList: any) => {\n\n              this.sharedProvider.getRecentUserListById(userId).then((recentUserList: any) => {\n\n                filterUserList = recentUserList;\n\n                if (followingList) {\n                  filterUserList = filterUserList.filter(e => !followingList.find(a => e.uid == a));\n                }\n\n                if (receivedFriendReq) {\n                  filterUserList = filterUserList.filter(e => !receivedFriendReq.find(a => e.uid == a));\n                }\n\n                if (sendFriendLists) {\n                  filterUserList = filterUserList.filter(e => !sendFriendLists.find(a => e.uid == a));\n                }\n\n                if (friendList) {\n                  filterUserList = filterUserList.filter(e => !friendList.find(a => e.uid == a));\n                }\n                resolve(filterUserList);\n              });\n            });\n          });\n        });\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Follow User\n   * --------------------------------------------------------------\n   * @method followUser\n   * \n   * This function will process the current user will follow to any target user.\n   * \n   * @param targetUserId      Any User ID - Current User Will Follow Target User\n   * @param currentUserId     Current User ID\n   */\n  async followUser(targetUserId, currentUserId) {\n\n    // By calling shared provider `addUserInFollowingList` method,\n    // Add target user's inside the current user following list.\n    await this.sharedProvider.addUserInFollowingList(currentUserId, targetUserId);\n\n    // By calling shared provider `addUserInFollowerList` method,\n    // Add current user's inside the target user followers list.\n    await this.sharedProvider.addUserInFollowerList(currentUserId, targetUserId);\n\n    // By calling shared provider `increaseUserFollowingCount` method,\n    // Increase current user's following count\n    await this.sharedProvider.increaseUserFollowingCount(currentUserId);\n\n    // By calling shared provider `increaseUserFollowersCount` method,\n    // Increase target user's followers count\n    await this.sharedProvider.increaseUserFollowersCount(targetUserId);\n\n    // Call notification provider `createNotification` method\n    // to create a notification of following user\n    this.notificationProvider.createNotification(currentUserId, targetUserId, 'following');\n\n    return new Observable(observer => {\n      observer.next('success');\n      observer.complete();\n    });\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve User Following ID's\n   * --------------------------------------------------------------\n   * @method getFollowingIds\n   * \n   * This function will load the user's Following ID's from the database.\n   * \n   * @param uid     User ID\n   */\n  getFollowingIds(uid) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/following/${uid}`).on('value', snapshot => {\n        if (snapshot.exists()) {\n          resolve(Object.keys(snapshot.val()));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n    return promise;\n  };\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve User Followers ID's\n   * --------------------------------------------------------------\n   * @method getFollowersIds\n   * \n   * This function will load the user's Followers ID's from the database.\n   * \n   * @param uid     User ID\n   */\n  getFollowersIds(uid) {\n    let promise = new Promise((resolve, reject) => {\n      this.db.database.ref(`/followers/${uid}`).on('value', snapshot => {\n        if (snapshot.exists()) {\n          resolve(Object.keys(snapshot.val()));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Following User's\n   * --------------------------------------------------------------\n   * @method getFollowingUsers\n   * @param uid     User ID\n   */\n  getFollowingUsers(uid) {\n\n    let users: any = [];\n    let count = 0;\n\n    let promise = new Promise((resolve, reject) => {\n      // Call `getFollowingIds` by current user ID and returning value will give\n      // list of following user's ID.\n      this.getFollowingIds(uid).then((following: any) => {\n        if (following) {\n          if (following.length > 0) {\n            following.forEach(element => {\n              // Call shared provider `getUserInfoByUserId` method by user ID\n              // and this method return particular user details information.\n              this.sharedProvider.getUserInfoByUserId(element).then((data) => {\n                count++;\n                users.push(Object.assign(data, { isFollowing: true }));\n                if (count === following.length) {\n                  resolve(users);\n                }\n              });\n            });\n          }\n        } else {\n          resolve(null);\n        }\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * --------------------------------------------------------------\n   * Retrieve Follower User's\n   * --------------------------------------------------------------\n   * @method getFollowersUser\n   * @param uid     User ID\n   */\n  getFollowersUser(uid) {\n    const customObj = { isFollowing: false };\n    const users: any = [];\n    let count = 0;\n\n    let promise = new Promise((resolve, reject) => {\n      // Call `getFollowingIds` by current user ID and returning value will give\n      // list of following user's ID.\n      this.getFollowingIds(uid).then((following: any) => {\n        // Call `getFollowersIds` by current user ID and returning value will give\n        // list of followers user's ID.\n        this.getFollowersIds(uid).then((followers: any) => {\n          if (followers) {\n            if (followers.length > 0) {\n              followers.forEach(element => {\n                // Call shared provider `getUserInfoByUserId` method by user ID\n                // and this method return particular user details information.\n                this.sharedProvider.getUserInfoByUserId(element).then((data) => {\n                  if (following) {\n                    const findFollowingUser = following.find((n) => n === element);\n                    if (findFollowingUser) {\n                      customObj.isFollowing = true;\n                    } else {\n                      customObj.isFollowing = false;\n                    }\n                  }\n                  count++;\n                  users.push(Object.assign(data, customObj));\n                  if (count === followers.length) {\n                    resolve(users);\n                  }\n                });\n              });\n            }\n          }\n          else {\n            resolve(null);\n          }\n        });\n      });\n    });\n    return promise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/connections/connections.ts"],"sourceRoot":""}